@model SimplySoft.Core.Test.WebUI.Models.ResponseMessage

@{
    string alertType = string.Empty;
    string glyph = string.Empty;
    string noTitle = Model.Title ?? "banner-no-title";

    if (Model.Style is Style.Banner)
    {
        switch (Model.AlertLevel)
        {
            case AlertLevel.Information:
                alertType = "cn-banner-info"; glyph = "fa-circle-info"; break;
            case AlertLevel.Success:
                alertType = "cn-banner-success"; glyph = "fa-circle-check"; break;
            case AlertLevel.Warning:
                alertType = "cn-banner-warning"; glyph = "fa-triangle-exclamation"; break;
            case AlertLevel.Error:
                alertType = "cn-banner-error"; glyph = "fa-circle-xmark"; break;
        }

        string showClose = !Model.ShowCloseButton ? "hide-dismiss" : string.Empty;

        <div class="cn-banner @alertType @noTitle animate__animated animate__bounceIn">
            <div class="banner-icon">
                <i class="fa @glyph"></i>
            </div>
            <div class="banner-info">
                <div>@Model.Title</div>
                <div>@Model.Message</div>
            </div>
            <div class="banner-dismiss @showClose" title="Close">
                &times;
            </div>
        </div>

        <link rel="stylesheet" href="~/lib/font-awesome/css/all.min.css" />
        <link rel="stylesheet" href="~/lib/animate.css/animate.min.css" />
        <link rel="stylesheet" href="~/css/alerts.css" />
        <script>
            $('.banner-dismiss').click((e) => { e.target.parentElement.remove() })
        </script>

        return;
    }

    if (Model.Style is Style.ChargeNetLegacy)
    {
        switch (Model.AlertLevel)
        {
            case AlertLevel.Information:
                alertType = "alert-primary"; break;
            case AlertLevel.Success:
                alertType = "alert-success"; break;
            case AlertLevel.Warning:
                alertType = "alert-warning"; break;
            case AlertLevel.Error:
                alertType = "alert-danger"; break;
        }

        string title = Model.Title ?? "Message";

        <div class="alert alert-dismissable @alertType">
            <button type="button" class="close" data-dismiss="alert">&times;</button>
            <strong>@title: </strong>@Model.Message
        </div>

        return;
    }

    if (Model.Style is Style.Toastr)
    {
        switch (Model.AlertLevel)
        {
            case AlertLevel.Information:
                alertType = "info"; break;
            case AlertLevel.Success:
                alertType = "success"; break;
            case AlertLevel.Warning:
                alertType = "warning"; break;
            case AlertLevel.Error:
                alertType = "error"; break;
        }

        string position = string.Empty;
        switch (Model.ToastrOptions.Position)
        {
            case ToastrPosition.TopRight:
                position = "toast-top-right"; break;
            case ToastrPosition.TopLeft:
                position = "toast-top-left"; break;
            case ToastrPosition.TopCenter:
                position = "toast-top-center"; break;
            case ToastrPosition.TopFull:
                position = "toast-top-full-width"; break;
            case ToastrPosition.BottomRight:
                position = "toast-bottom-right"; break;
            case ToastrPosition.BottomLeft:
                position = "toast-bottom-left"; break;
            case ToastrPosition.BottomCenter:
                position = "toast-bottom-center"; break;
            case ToastrPosition.BottomFull:
                position = "toast-bottom-full-width"; break;
        }

        string title = Model.Title ?? string.Empty;

        <script>
            toastr.options = {
                progressBar: @Model.ToastrOptions.ShowProgressBar.ToString().ToLower(),
                closeButton: @Model.ShowCloseButton.ToString().ToLower(),
                showDuration: '@Model.ToastrOptions.ShowDuration',
                hideDuration: '@Model.ToastrOptions.HideDuration',
                timeOut: '@Model.ToastrOptions.TimeOut',
                extendedTimeOut: '@Model.ToastrOptions.ExtendedTimeOut',
                positionClass: '@position'
            }
            toastr["@alertType"]('@Model.Message', '@title')
        </script>

        return;
    }
}